# GSoC2023
Import-Export Instances on KVM


# Goal of the Project:

The goal of the project is to implement Import and Export Instances(Virtual Machines) functionality for KVM Hypervisor.  Currently, this functionality is only available for VMWare and I would be working on extending it to KVM Hypervisor. Manage Instance are the ones which are managed by apache cloudstack and persist in cloudstack databases. Unmanage Instance are the ones which are not managed by apache cloudstack and do not persist in cloudstack Database.




# Contributions made during GSoC :

Implementation of three API’s:

ListUnmanagesInstances
unManageVirtualMachine
importUnmanagedInstances



listUnmanagedInstances API: This API is used list all the unmanage instances 
This api executes the required qemu/virsh commands and presents the users with VM details. It will list all the unmanage instances in the apache cloudstack ( meaning these instances are not managed by cloudstack and do not persist in cloudstack database). To implement listUnmanagedInstances api I created a wrapper class LibvirtPrepareUnmanageVMInstanceCommandWrapper which wraps the core commands (PrepareUnmanageVMInstanceCommand) which is send from management server to  the host/agent. This wrapper class is executed on the host which returns an object of answer class(PrepareUnmanageVMInstanceAnswer) which has the list of all the unmanaged virtual machines which is sent back to the management server and then management server sends it back to the user. This class is used to check if the virtual machine which needs to be unmanaged exists or not.



unmanageVirtualMachine API: It is used to unmanage a managed instance. 
This API cleans up the cloudstack resources dedicated to managing the instance. It takes virtual machine id as parameter and then unmanage it by removing it from the cloudstack database. To implement this api, I tried to populate all the attributes of the UnmanagedInstanceTO class. For this, I created a wrapper class LibvirtGetUnmanagedInstancesCommandWrapper and inside this an unmanaged Instance function which returns an instance of UnmanagedInstanceTO class. Inside this function, I used parseDomainXML() inside LibvirtDomainXMLParser class which will parse the domain xml and will return the attributes of the virtual machine. I wrote the function extractCpuTuneDef() and extractCpuModeDef() which returns the attribute from managed VM xml and parse it and return value such as Shares,Quota,Period which is use to set the VM attributes such as CpuCoresperSocket,cpuSpeed etc.

importUnmanagedInstances API: This API imports an unmanaged Virtual machine into cloudstack from the above list. The management server can populate the details relevant for importing the virtual machine and managing it with the virtual machine’s XML configuration.
To implement it, I populated all the required parameters such as templateid, serviceofferingid, nicnetworklist, nicipaddresslist from unmanageinstanceTO class and the properties which can’t be fetched from TO object would be given by the user during import/managing an unmanaged instance. 
I also made changes in the UI for this API to be able to work/triggered from UI along with CLI.


# Current State :

I’ve finished the development part and currently my changes are being reviewed by my mentor and other contributors. Based on the feedbacl/inputs I would be refracting the code and then my changes will  be merged.

# Images for Reference: 

This is the expectation after implementation of Import-Export Instances on KVM Hypervisor (Below image is for VMWare Hypervisor which already has this feature)



Image of the Instance that I created using KVM Hypervisor to unmanage the instance 


As you can see in the above picture. After implementation of unmanageVirtualMachine api, the unmanage instance which I created in the previous picture is unmanaged now.



Below is an Unmanaged Instances, which I created and the  unmanaged it



These are some fields which needs to be populated to import above unmanaged instance




As you can see in the below picture the unmange instance is managed now


We can see the details of the managed instances in the instances section of compute tab



# Future Goals :
Complete Integration Testing and code refactoring
Currently there can only be one instance managed or unmanaged at a time. In future,  implementing functionality for managing or unmanaging multiple VMs simultaneously.

# Conclusion :
I would like to thank my mentor Nicolas and Alex for their support and help throughout the project. There are also other contributors in the community, such as Daan Hoogland, Rohit Yadav and others, who have also helped me a lot. This summer vacation, I have witnessed the whole process/architecture  of Infrastructure as a Service(IaaS) and how an open source works. Special thanks to the Apache SoftwareFoundation and the GSoC community for such a great opportunity to enter in the open Source realm.


# Work Link Section:

Github Link of my work/commits  in the Project:
https://github.com/apache/cloudstack/pull/7712

Github Link of the Project:
https://github.com/apache/cloudstack/issues/7127
GSoC Project Link :  
https://summerofcode.withgoogle.com/programs/2023/projects/f0gpheQM




